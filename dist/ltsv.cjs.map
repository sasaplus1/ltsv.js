{"version":3,"file":"ltsv.cjs","sources":["../src/validator.ts","../src/formatter.ts","../src/parser.ts"],"sourcesContent":["/**\n * validate label\n *\n * @param label\n */\nexport function isValidLabel(label: string): boolean {\n  return /^[0-9A-Za-z_.-]+$/.test(label);\n}\n\n/**\n * validate for value\n *\n * @param value\n */\nexport function isValidValue(value: string): boolean {\n  // eslint-disable-next-line no-control-regex\n  return /^[\\x01-\\x08\\x0B\\x0C\\x0E-\\xFF]*$/.test(value);\n}\n","import { isValidLabel, isValidValue } from './validator';\n\nimport { LtsvRecord } from './types';\n\nexport type StringifyOptions = {\n  strict: boolean;\n};\n\n/**\n * convert to record string from object\n *\n * @private\n * @param record\n * @param strict\n * @throws {TypeError}\n */\nfunction objectToRecord(record: LtsvRecord, strict: boolean): string {\n  if (record === null || typeof record !== 'object') {\n    throw new TypeError('record must be an Object');\n  }\n\n  const keys = Object.keys(record);\n  const fields = [];\n\n  for (let i = 0, len = keys.length; i < len; ++i) {\n    const label = keys[i];\n\n    if (!label) {\n      throw new TypeError('label must be a non-empty string');\n    }\n\n    const value = record[label];\n\n    if (!value) {\n      throw new TypeError('value must be a non-empty string');\n    }\n\n    if (strict && !isValidLabel(label)) {\n      throw new SyntaxError(`unexpected character in label: \"${label}\"`);\n    }\n\n    if (strict && !isValidValue(value)) {\n      throw new SyntaxError(`unexpected character in value: \"${value}\"`);\n    }\n\n    fields[i] = label + ':' + value;\n  }\n\n  return fields.join('\\t');\n}\n\n/**\n * convert to LTSV string from object or array\n *\n * @private\n * @param data\n * @param strict\n * @throws {TypeError}\n */\nfunction baseFormat(data: LtsvRecord | LtsvRecord[], strict: boolean): string {\n  const isArray = Array.isArray(data);\n\n  if (!isArray && (data === null || typeof data !== 'object')) {\n    throw new TypeError('data must be an Object or Array');\n  }\n\n  const records: string[] = [];\n\n  if (isArray) {\n    for (let i = 0, len = data.length; i < len; ++i) {\n      const record = data[i];\n\n      if (!record) {\n        throw new TypeError('record must be an Object');\n      }\n\n      records[i] = objectToRecord(record, strict);\n    }\n  } else {\n    records.push(objectToRecord(data as LtsvRecord, strict));\n  }\n\n  return records.join('\\n');\n}\n\n/**\n * convert to LTSV string from object or array\n *\n * @param data\n * @see baseFormat\n */\nexport function format(data: LtsvRecord | LtsvRecord[]): string {\n  return baseFormat(data, false);\n}\n\n/**\n * convert to LTSV string from object or array\n *\n * @param data\n * @see baseFormat\n */\nexport function formatStrict(data: LtsvRecord | LtsvRecord[]): string {\n  return baseFormat(data, true);\n}\n\n/**\n * convert to LTSV string from object or array\n *\n * @param data\n * @param options\n * @see baseFormat\n */\nexport function stringify(\n  data: LtsvRecord | LtsvRecord[],\n  options: StringifyOptions = { strict: false }\n): string {\n  const { strict = false } = options;\n\n  return baseFormat(data, strict);\n}\n","import { isValidLabel, isValidValue } from './validator';\n\nimport { LtsvRecord } from './types';\n\ntype LtsvField = {\n  label: string;\n  value: string;\n};\n\n/**\n * split to label and value from field\n *\n * @private\n * @param chunk\n * @param strict\n * @throws {SyntaxError}\n * @throws {TypeError}\n */\nfunction splitField(chunk: string | undefined, strict: boolean): LtsvField {\n  if (chunk === undefined) {\n    throw new TypeError('chunk is undefined');\n  }\n\n  const index = chunk.indexOf(':');\n\n  if (index === -1) {\n    throw new SyntaxError(`field separator is not found: \"${chunk}\"`);\n  }\n\n  const label = chunk.slice(0, index);\n  const value = chunk.slice(index + 1);\n\n  if (strict && !isValidLabel(label)) {\n    throw new SyntaxError(`unexpected character in label: \"${label}\"`);\n  }\n\n  if (strict && !isValidValue(value)) {\n    throw new SyntaxError(`unexpected character in value: \"${value}\"`);\n  }\n\n  return {\n    label,\n    value\n  };\n}\n\n/**\n * parse LTSV record\n *\n * @private\n * @param line\n * @param strict\n */\nfunction baseParseLine(line: string | undefined, strict: boolean): LtsvRecord {\n  const fields = String(line)\n    .replace(/(?:\\r?\\n)+$/, '')\n    .split('\\t');\n\n  const record: LtsvRecord = {};\n\n  for (let i = 0, len = fields.length; i < len; ++i) {\n    const { label, value } = splitField(fields[i], strict);\n\n    record[label] = value;\n  }\n\n  return record;\n}\n\n/**\n * parse LTSV text\n *\n * @private\n * @param text\n * @param strict\n */\nfunction baseParse(text: string, strict: boolean): LtsvRecord[] {\n  const lines = String(text)\n    .replace(/(?:\\r?\\n)+$/, '')\n    .split(/\\r?\\n/);\n\n  const records: LtsvRecord[] = [];\n\n  for (let i = 0, len = lines.length; i < len; ++i) {\n    records[i] = baseParseLine(lines[i], strict);\n  }\n\n  return records;\n}\n\n/**\n * parse LTSV text\n *\n * @param text\n */\nexport function parse(text: string): LtsvRecord[] {\n  return baseParse(text, false);\n}\n\n/**\n * parse LTSV record\n *\n * @param line\n */\nexport function parseLine(line: string): LtsvRecord {\n  return baseParseLine(line, false);\n}\n\n/**\n * parse LTSV text\n *\n * @param text\n */\nexport function parseStrict(text: string): LtsvRecord[] {\n  return baseParse(text, true);\n}\n\n/**\n * parse LTSV record\n *\n * @param line\n */\nexport function parseLineStrict(line: string): LtsvRecord {\n  return baseParseLine(line, true);\n}\n"],"names":["isValidLabel","label","test","isValidValue","value","objectToRecord","record","strict","TypeError","keys","Object","fields","i","len","length","SyntaxError","join","baseFormat","data","isArray","Array","records","push","splitField","chunk","undefined","index","indexOf","slice","baseParseLine","line","String","replace","split","_splitField","baseParse","text","lines","options","_options$strict"],"mappings":"SAKgBA,EAAaC,GAC3B,0BAA2BC,KAAKD,EAClC,UAOgBE,EAAaC,GAE3B,wCAAyCF,KAAKE,EAChD,CCDA,SAASC,EAAeC,EAAoBC,GAC1C,GAAe,OAAXD,GAAqC,iBAAXA,EAC5B,UAAUE,UAAU,4BAMtB,IAHA,IAAMC,EAAOC,OAAOD,KAAKH,GACnBK,EAAS,GAENC,EAAI,EAAGC,EAAMJ,EAAKK,OAAQF,EAAIC,IAAOD,EAAG,CAC/C,IAAMX,EAAQQ,EAAKG,GAEnB,IAAKX,EACH,UAAUO,UAAU,oCAGtB,IAAMJ,EAAQE,EAAOL,GAErB,IAAKG,EACH,UAAUI,UAAU,oCAGtB,GAAID,IAAWP,EAAaC,GAC1B,UAAUc,+CAA+Cd,OAG3D,GAAIM,IAAWJ,EAAaC,GAC1B,UAAUW,+CAA+CX,OAG3DO,EAAOC,GAAKX,EAAQ,IAAMG,EAG5B,OAAOO,EAAOK,KAAK,KACrB,CAUA,SAASC,EAAWC,EAAiCX,GACnD,IAAMY,EAAUC,MAAMD,QAAQD,GAE9B,IAAKC,IAAqB,OAATD,GAAiC,iBAATA,GACvC,UAAUV,UAAU,mCAGtB,IAAMa,EAAoB,GAE1B,GAAIF,EACF,IAAK,IAAIP,EAAI,EAAGC,EAAMK,EAAKJ,OAAQF,EAAIC,IAAOD,EAAG,CAC/C,IAAMN,EAASY,EAAKN,GAEpB,IAAKN,EACH,UAAUE,UAAU,4BAGtBa,EAAQT,GAAKP,EAAeC,EAAQC,QAGtCc,EAAQC,KAAKjB,EAAea,EAAoBX,IAGlD,OAAOc,EAAQL,KAAK,KACtB,CCjEA,SAASO,EAAWC,EAA2BjB,GAC7C,QAAckB,IAAVD,EACF,UAAUhB,UAAU,sBAGtB,IAAMkB,EAAQF,EAAMG,QAAQ,KAE5B,IAAe,IAAXD,EACF,UAAUX,8CAA8CS,OAG1D,IAAMvB,EAAQuB,EAAMI,MAAM,EAAGF,GACvBtB,EAAQoB,EAAMI,MAAMF,EAAQ,GAElC,GAAInB,IAAWP,EAAaC,GAC1B,UAAUc,+CAA+Cd,OAG3D,GAAIM,IAAWJ,EAAaC,GAC1B,UAAUW,+CAA+CX,OAG3D,MAAO,CACLH,MAAAA,EACAG,MAAAA,EAEJ,CASA,SAASyB,EAAcC,EAA0BvB,GAO/C,IANA,IAAMI,EAASoB,OAAOD,GACnBE,QAAQ,cAAe,IACvBC,MAAM,MAEH3B,EAAqB,GAElBM,EAAI,EAAGC,EAAMF,EAAOG,OAAQF,EAAIC,IAAOD,EAAG,CACjD,IAAAsB,EAAyBX,EAAWZ,EAAOC,GAAIL,GAE/CD,EAFa4B,EAALjC,OAAYiC,EAAL9B,MAKjB,OAAOE,CACT,CASA,SAAS6B,EAAUC,EAAc7B,GAO/B,IANA,IAAM8B,EAAQN,OAAOK,GAClBJ,QAAQ,cAAe,IACvBC,MAAM,SAEHZ,EAAwB,GAErBT,EAAI,EAAGC,EAAMwB,EAAMvB,OAAQF,EAAIC,IAAOD,EAC7CS,EAAQT,GAAKiB,EAAcQ,EAAMzB,GAAIL,GAGvC,OAAOc,CACT,yBDGuBH,GACrB,OAAOD,EAAWC,GAAM,EAC1B,gCAQ6BA,GAC3B,OAAOD,EAAWC,GAAM,EAC1B,uECRsBkB,GACpB,OAAOD,EAAUC,GAAM,EACzB,6BAO0BN,GACxB,OAAOD,EAAcC,GAAM,EAC7B,mCAgBgCA,GAC9B,OAAOD,EAAcC,GAAM,EAC7B,+BAX4BM,GAC1B,OAAOD,EAAUC,GAAM,EACzB,6BDFElB,EACAoB,YAAAA,IAAAA,EAA4B,CAAE/B,QAAQ,IAEtC,IAAkCgC,EAAPD,EAAnB/B,OAER,OAAOU,EAAWC,WAFJqB,GAAQA,EAGxB"}