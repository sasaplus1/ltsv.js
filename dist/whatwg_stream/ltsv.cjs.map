{"version":3,"file":"ltsv.cjs","sources":["../../src/parser.ts","../../src/validator.ts","../../src/whatwg_stream.ts"],"sourcesContent":["import { isValidLabel, isValidValue } from './validator';\n\nimport { LtsvRecord } from './types';\n\ntype LtsvField = {\n  label: string;\n  value: string;\n};\n\n/**\n * split to label and value from field\n *\n * @private\n * @param chunk\n * @param strict\n * @throws {SyntaxError}\n * @throws {TypeError}\n */\nfunction splitField(chunk: string | undefined, strict: boolean): LtsvField {\n  if (chunk === undefined) {\n    throw new TypeError('chunk is undefined');\n  }\n\n  const index = chunk.indexOf(':');\n\n  if (index === -1) {\n    throw new SyntaxError(`field separator is not found: \"${chunk}\"`);\n  }\n\n  const label = chunk.slice(0, index);\n  const value = chunk.slice(index + 1);\n\n  if (strict && !isValidLabel(label)) {\n    throw new SyntaxError(`unexpected character in label: \"${label}\"`);\n  }\n\n  if (strict && !isValidValue(value)) {\n    throw new SyntaxError(`unexpected character in value: \"${value}\"`);\n  }\n\n  return {\n    label,\n    value\n  };\n}\n\n/**\n * parse LTSV record\n *\n * @private\n * @param line\n * @param strict\n */\nfunction baseParseLine(line: string | undefined, strict: boolean): LtsvRecord {\n  const fields = String(line)\n    .replace(/(?:\\r?\\n)+$/, '')\n    .split('\\t');\n\n  const record: LtsvRecord = {};\n\n  for (let i = 0, len = fields.length; i < len; ++i) {\n    const { label, value } = splitField(fields[i], strict);\n\n    record[label] = value;\n  }\n\n  return record;\n}\n\n/**\n * parse LTSV text\n *\n * @private\n * @param text\n * @param strict\n */\nfunction baseParse(text: string, strict: boolean): LtsvRecord[] {\n  const lines = String(text)\n    .replace(/(?:\\r?\\n)+$/, '')\n    .split(/\\r?\\n/);\n\n  const records: LtsvRecord[] = [];\n\n  for (let i = 0, len = lines.length; i < len; ++i) {\n    records[i] = baseParseLine(lines[i], strict);\n  }\n\n  return records;\n}\n\n/**\n * parse LTSV text\n *\n * @param text\n */\nexport function parse(text: string): LtsvRecord[] {\n  return baseParse(text, false);\n}\n\n/**\n * parse LTSV record\n *\n * @param line\n */\nexport function parseLine(line: string): LtsvRecord {\n  return baseParseLine(line, false);\n}\n\n/**\n * parse LTSV text\n *\n * @param text\n */\nexport function parseStrict(text: string): LtsvRecord[] {\n  return baseParse(text, true);\n}\n\n/**\n * parse LTSV record\n *\n * @param line\n */\nexport function parseLineStrict(line: string): LtsvRecord {\n  return baseParseLine(line, true);\n}\n","/**\n * validate label\n *\n * @param label\n */\nexport function isValidLabel(label: string): boolean {\n  return /^[0-9A-Za-z_.-]+$/.test(label);\n}\n\n/**\n * validate for value\n *\n * @param value\n */\nexport function isValidValue(value: string): boolean {\n  // eslint-disable-next-line no-control-regex\n  return /^[\\x01-\\x08\\x0B\\x0C\\x0E-\\xFF]*$/.test(value);\n}\n","import { parseLine, parseLineStrict } from './parser';\nimport { LtsvRecord } from './types';\n\nexport type LtsvToJsonStreamOptions = {\n  objectMode?: boolean;\n  strict?: boolean;\n};\n\ntype LtsvToJsonStreamInstance = {\n  buffer: string;\n  objectMode: boolean;\n  parse: typeof parseLine | typeof parseLineStrict;\n};\n\n/**\n * transform and push to stream\n *\n * @param text\n * @param isFlush\n * @param controller\n */\nfunction push(\n  this: LtsvToJsonStreamInstance,\n  text: string,\n  isFlush: boolean,\n  controller: TransformStreamDefaultController<string | LtsvRecord>\n): void {\n  let next = 0;\n  let last = 0;\n  let error: Error | null = null;\n\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    let index = text.indexOf('\\n', next);\n\n    if (index === -1) {\n      if (isFlush && next < text.length) {\n        // NOTE: subtract 1 from text.length,\n        // NOTE: because add 1 to index when slice.\n        index = text.length - 1;\n      } else {\n        break;\n      }\n    }\n\n    // NOTE: include `\\n`.\n    // NOTE: foo:foo\\tbar:bar\\nfoo:foo\\tbar:bar\\n\n    // NOTE: -----------------|\n    const line = text.slice(next, index + 1);\n\n    let record: LtsvRecord = {};\n\n    try {\n      record = this.parse(line);\n    } catch (e) {\n      if (e instanceof Error) {\n        error = e;\n      }\n    }\n\n    if (error) {\n      break;\n    }\n\n    controller.enqueue(this.objectMode ? record : JSON.stringify(record));\n\n    // NOTE: save next start index.\n    // NOTE: foo:foo\\tbar:bar\\nfoo:foo\\tbar:bar\\n\n    // NOTE: ------------------|\n    last = next = index + 1;\n  }\n\n  this.buffer = text.slice(last);\n\n  if (error) {\n    controller.error(error);\n  }\n}\n\n/**\n * LTSV to JSON transform stream\n *\n * @param options\n */\nexport function LtsvToJsonStream(\n  options: LtsvToJsonStreamOptions = {\n    objectMode: false,\n    strict: false\n  }\n): Transformer<string, string | LtsvRecord> {\n  const { objectMode = false, strict = false } = options;\n\n  const instance: LtsvToJsonStreamInstance = {\n    buffer: '',\n    objectMode,\n    parse: strict ? parseLineStrict : parseLine\n  };\n\n  return {\n    /**\n     * transform implementation.\n     *\n     * @param chunk\n     * @param controller\n     */\n    transform(\n      chunk: string,\n      controller: TransformStreamDefaultController<string | LtsvRecord>\n    ): void {\n      push.call(instance, instance.buffer + chunk, false, controller);\n    },\n    /**\n     * flush implementation.\n     *\n     * @param controller\n     */\n    flush(\n      controller: TransformStreamDefaultController<string | LtsvRecord>\n    ): void {\n      push.call(instance, instance.buffer, true, controller);\n    }\n  };\n}\n\nexport function createLtsvToJsonStream(\n  options?: LtsvToJsonStreamOptions\n): TransformStream<string, string | LtsvRecord> {\n  return new TransformStream(LtsvToJsonStream(options));\n}\n"],"names":["splitField","chunk","strict","undefined","TypeError","index","indexOf","SyntaxError","label","slice","value","test","isValidLabel","isValidValue","baseParseLine","line","fields","String","replace","split","record","i","len","length","_splitField","parseLine","parseLineStrict","push","text","isFlush","controller","next","last","error","this","parse","e","Error","enqueue","objectMode","JSON","stringify","buffer","LtsvToJsonStream","options","_options$objectMode","_options$strict","instance","transform","call","flush","TransformStream"],"mappings":"AAkBA,SAASA,EAAWC,EAA2BC,GAC7C,QAAcC,IAAVF,EACF,UAAUG,UAAU,sBAGtB,IAAMC,EAAQJ,EAAMK,QAAQ,KAE5B,IAAe,IAAXD,EACF,UAAUE,8CAA8CN,OAG1D,IAAMO,EAAQP,EAAMQ,MAAM,EAAGJ,GACvBK,EAAQT,EAAMQ,MAAMJ,EAAQ,GAElC,GAAIH,aC3BuBM,GAC3B,0BAA2BG,KAAKH,EAClC,CDyBiBI,CAAaJ,GAC1B,UAAUD,+CAA+CC,OAG3D,GAAIN,aCtBuBQ,GAE3B,wCAAyCC,KAAKD,EAChD,CDmBiBG,CAAaH,GAC1B,UAAUH,+CAA+CG,OAG3D,MAAO,CACLF,MAAAA,EACAE,MAAAA,EAEJ,CASA,SAASI,EAAcC,EAA0Bb,GAO/C,IANA,IAAMc,EAASC,OAAOF,GACnBG,QAAQ,cAAe,IACvBC,MAAM,MAEHC,EAAqB,GAElBC,EAAI,EAAGC,EAAMN,EAAOO,OAAQF,EAAIC,IAAOD,EAAG,CACjD,IAAAG,EAAyBxB,EAAWgB,EAAOK,GAAInB,GAE/CkB,EAFaI,EAALhB,OAAYgB,EAALd,MAKjB,OAAOU,CACT,UAqCgBK,EAAUV,GACxB,OAAOD,EAAcC,GAAM,EAC7B,UAgBgBW,EAAgBX,GAC9B,OAAOD,EAAcC,GAAM,EAC7B,CEvGA,SAASY,EAEPC,EACAC,EACAC,GAOA,IALA,IAAIC,EAAO,EACPC,EAAO,EACPC,EAAsB,OAGb,CACX,IAAI5B,EAAQuB,EAAKtB,QAAQ,KAAMyB,GAE/B,IAAe,IAAX1B,EAAc,CAChB,KAAIwB,GAAWE,EAAOH,EAAKL,QAKzB,MAFAlB,EAAQuB,EAAKL,OAAS,EAS1B,IAAMR,EAAOa,EAAKnB,MAAMsB,EAAM1B,EAAQ,GAElCe,EAAqB,GAEzB,IACEA,EAASc,KAAKC,MAAMpB,GACpB,MAAOqB,GACHA,aAAaC,QACfJ,EAAQG,GAIZ,GAAIH,EACF,MAGFH,EAAWQ,QAAQJ,KAAKK,WAAanB,EAASoB,KAAKC,UAAUrB,IAK7DY,EAAOD,EAAO1B,EAAQ,EAGxB6B,KAAKQ,OAASd,EAAKnB,MAAMuB,GAErBC,GACFH,EAAWG,MAAMA,EAErB,UAOgBU,EACdC,YAAAA,IAAAA,EAAmC,CACjCL,YAAY,EACZrC,QAAQ,IAGV,IAAsD2C,EAAPD,EAAvCL,WAAkBO,EAAqBF,EAAnB1C,OAEtB6C,EAAqC,CACzCL,OAAQ,GACRH,oBAJgBM,GAAQA,EAKxBV,eALgCW,GAAQA,EAKxBpB,EAAkBD,GAGpC,MAAO,CAOLuB,mBACE/C,EACA6B,GAEAH,EAAKsB,KAAKF,EAAUA,EAASL,OAASzC,GAAO,EAAO6B,EACtD,EAMAoB,eACEpB,GAEAH,EAAKsB,KAAKF,EAAUA,EAASL,QAAQ,EAAMZ,EAC7C,EAEJ,oEAGEc,GAEA,WAAWO,gBAAgBR,EAAiBC,GAC9C"}