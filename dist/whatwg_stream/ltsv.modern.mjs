function e(e,t){if(void 0===e)throw new TypeError("chunk is undefined");const r=e.indexOf(":");if(-1===r)throw new SyntaxError(`field separator is not found: "${e}"`);const n=e.slice(0,r),o=e.slice(r+1);if(t&&!function(e){return/^[0-9A-Za-z_.-]+$/.test(e)}(n))throw new SyntaxError(`unexpected character in label: "${n}"`);if(t&&!function(e){return/^[\x01-\x08\x0B\x0C\x0E-\xFF]*$/.test(e)}(o))throw new SyntaxError(`unexpected character in value: "${o}"`);return{label:n,value:o}}function t(t,r){const n=String(t).replace(/(?:\r?\n)+$/,"").split("\t"),o={};for(let t=0,i=n.length;t<i;++t){const{label:i,value:c}=e(n[t],r);o[i]=c}return o}function r(e){return t(e,!1)}function n(e){return t(e,!0)}function o(e,t,r){let n=0,o=0,i=null;for(;;){let c=e.indexOf("\n",n);if(-1===c){if(!(t&&n<e.length))break;c=e.length-1}const f=e.slice(n,c+1);let u={};try{u=this.parse(f)}catch(e){e instanceof Error&&(i=e)}if(i)break;r.enqueue(this.objectMode?u:JSON.stringify(u)),o=n=c+1}this.buffer=e.slice(o),i&&r.error(i)}function i(e={objectMode:!1,strict:!1}){const{objectMode:t=!1,strict:i=!1}=e,c={buffer:"",objectMode:t,parse:i?n:r};return{transform(e,t){o.call(c,c.buffer+e,!1,t)},flush(e){o.call(c,c.buffer,!0,e)}}}function c(e){return new TransformStream(i(e))}export{i as LtsvToJsonStream,c as createLtsvToJsonStream};
//# sourceMappingURL=ltsv.modern.mjs.map
