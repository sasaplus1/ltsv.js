function e(e,t){const r=String(e),n=r.indexOf(":");if(-1===n)throw new SyntaxError(`field separator is not found: "${r}"`);const o=r.slice(0,n),c=r.slice(n+1);if(t&&!function(e){return/^[0-9A-Za-z_.-]+$/.test(e)}(o))throw new SyntaxError(`unexpected character in label: "${o}"`);if(t&&!function(e){return/^[\x01-\x08\x0B\x0C\x0E-\xFF]*$/.test(e)}(c))throw new SyntaxError(`unexpected character in value: "${c}"`);return{label:o,value:c}}function t(t,r){const n=String(t).replace(/(?:\r?\n)+$/,"").split("\t"),o={};for(let t=0,c=n.length;t<c;++t){const{label:c,value:i}=e(n[t],r);o[c]=i}return o}function r(e){return t(e,!1)}function n(e){return t(e,!0)}function o(e,t,r){let n=0,o=0,c=null;for(;;){let i=e.indexOf("\n",n);if(-1===i){if(!(t&&n<e.length))break;i=e.length-1}const f=e.slice(n,i+1);let u={};try{u=this.parse(f)}catch(e){e instanceof Error&&(c=e)}if(c)break;r.enqueue(this.objectMode?u:JSON.stringify(u)),o=n=i+1}this.buffer=e.slice(o),c&&r.error(c)}function c(e={objectMode:!1,strict:!1}){const{objectMode:t=!1,strict:c=!1}=e,i={buffer:"",objectMode:t,parse:c?n:r};return{transform(e,t){o.call(i,i.buffer+e,!1,t)},flush(e){o.call(i,i.buffer,!0,e)}}}function i(e){return new TransformStream(c(e))}export{c as LtsvToJsonStream,i as createLtsvToJsonStream};
//# sourceMappingURL=ltsv.modern.mjs.map
